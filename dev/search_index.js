var documenterSearchIndex = {"docs":
[{"location":"library/#library","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"In the context of the package, exponential family distributions are represented in the form  beginaligned f_X(xmidtheta) = h(x)expbigleta(theta) cdot T(x) - A(theta)bigr endaligned where h(x) - basemeasure, T(x) - sufficient statistics, A(theta) - log partition, eta(theta) - natural parameters.","category":"page"},{"location":"library/#Main-Structure","page":"Library","title":"Main Structure","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"ExponentialFamilyDistribution","category":"page"},{"location":"library/#ExponentialFamily.ExponentialFamilyDistribution","page":"Library","title":"ExponentialFamily.ExponentialFamilyDistribution","text":"ExponentialFamilyDistribution(::Type{T}, naturalparameters, [ conditioner, basemeasure, sufficientstatistics, logpartition, support, supportcheck ])\n\nExponentialFamilyDistribution structure represents a generic exponential family distribution in natural parameterization. Methods defined are basemeasure ,sufficientstatistics,  naturalparameters, logpartition and support.\n\ngetbasemeasure returns a positive a valued function. \ngetsufficientstatistics returns an iterable of functions such as [x, x^2] or [x, logx].\ngetnaturalparameters returns an iterable holding the values of the natural parameters. \ngetlogpartition return a function that depends on the naturalparameters and it ensures that the distribution is normalized to 1. \nsupport returns the set that the distribution is defined over. Could be real numbers, positive integers, 3d cube etc. Use the insupport to check if a values is in support.\n\nSee also: getbasemeasure, getsufficientstatistics, getnaturalparameters, getlogpartition, getsupport\n\n\n\n\n\n","category":"type"},{"location":"library/#Methods","page":"Library","title":"Methods","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"ExponentialFamily.getlogpartition\nExponentialFamily.getbasemeasure\nExponentialFamily.getsufficientstatistics\nExponentialFamily.getnaturalparameters\nExponentialFamily.getsupport\nExponentialFamily.logpdf\nExponentialFamily.pdf\nExponentialFamily.fisherinformation","category":"page"},{"location":"library/#ExponentialFamily.getlogpartition","page":"Library","title":"ExponentialFamily.getlogpartition","text":"getlogpartition(ef::ExponentialFamilyDistribution)\n\nGet the log partition of the exponential family distribution ef.\n\n\n\n\n\n","category":"function"},{"location":"library/#ExponentialFamily.getbasemeasure","page":"Library","title":"ExponentialFamily.getbasemeasure","text":"getbasemeasure(ef::ExponentialFamilyDistribution)\n\nGet the base measure of the exponential family distribution ef.\n\n\n\n\n\n","category":"function"},{"location":"library/#ExponentialFamily.getsufficientstatistics","page":"Library","title":"ExponentialFamily.getsufficientstatistics","text":"getsufficientstatistics(ef::ExponentialFamilyDistribution)\n\nGet the sufficient statistics of the exponential family distribution ef.\n\n\n\n\n\n","category":"function"},{"location":"library/#ExponentialFamily.getnaturalparameters","page":"Library","title":"ExponentialFamily.getnaturalparameters","text":"getnaturalparameters(exponentialfamily::ExponentialFamilyDistribution)\n\nGet the natural parameters of the exponential family distribution ef.\n\n\n\n\n\n","category":"function"},{"location":"library/#ExponentialFamily.getsupport","page":"Library","title":"ExponentialFamily.getsupport","text":"getsupport(ef::ExponentialFamilyDistribution)\n\nGet the support of the exponential family distribution ef.\n\n\n\n\n\n","category":"function"},{"location":"library/#Distributions.logpdf","page":"Library","title":"Distributions.logpdf","text":"Distributions.logpdf(exponentialfamily::ExponentialFamilyDistribution{T}, x) where {T <: Distribution}\n\nEvaluate the log-density of the exponential family distribution for the input x with constant base measure.\n\nArguments\n\nexponentialfamily: The exponential family distribution.\nx: The input value.\n\nReturns\n\nThe log-density of exponentialfamily evaluated at x with constant base measure.\n\n\n\n\n\nDistributions.logpdf(exponentialfamily::ExponentialFamilyDistribution{T, H, S, P, C, Z, A, B}, x, ::ConstantBaseMeasure)\n\nEvaluate the log-density of the exponential family distribution for the input x with constant base measure.\n\nArguments\n\nexponentialfamily: The exponential family distribution.\nx: The input value.\n::ConstantBaseMeasure: A marker for the constant base measure (used for dispatch).\n\nReturns\n\nThe log-density of exponentialfamily evaluated at x with constant base measure.\n\n\n\n\n\nDistributions.logpdf(exponentialfamily::ExponentialFamilyDistribution{T, H, S, P, C, Z, A, B}, x, ::NonConstantBaseMeasure)\n\nEvaluate the log-density of the exponential family distribution for the input x with non-constant base measure.\n\nArguments\n\nexponentialfamily: The exponential family distribution.\nx: The input value.\n::NonConstantBaseMeasure: A marker for the non-constant base measure (used for dispatch).\n\nReturns\n\nThe log-density of exponentialfamily evaluated at x with non-constant base measure.\n\n\n\n\n\nDistributions.logpdf(exponentialfamily::ExponentialFamilyDistribution{T, H, S, P, C, Z, A, B}, x)\n\nEvaluate the log-density of the exponential family distribution for the input x with constant base measure.\n\nArguments\n\nexponentialfamily: The exponential family distribution.\nx: The input value.\n\nReturns\n\nThe log-density of exponentialfamily evaluated at x with constant base measure.\n\n\n\n\n\n","category":"function"},{"location":"library/#Distributions.pdf","page":"Library","title":"Distributions.pdf","text":"Distributions.pdf(exponentialfamily::ExponentialFamilyDistribution, x)\n\nEvaluate the probability density function of the exponential family distribution for the input x.\n\n\n\n\n\n","category":"function"},{"location":"library/#ExponentialFamily.fisherinformation","page":"Library","title":"ExponentialFamily.fisherinformation","text":"The function fisherinformation is used to compute the Fisher information matrix of an exponential family distribution. fisherinformation calculates the Fisher information matrix based on the natural parameters of the distribution.\n\n\n\n\n\n","category":"function"},{"location":"library/#Additional-distributions","page":"Library","title":"Additional distributions","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"These are the distributions that are not included in the Distributions.jl package.","category":"page"},{"location":"library/","page":"Library","title":"Library","text":"ExponentialFamily.Contingency\nExponentialFamily.ContinuousBernoulli\nExponentialFamily.MatrixDirichlet\nExponentialFamily.GammaShapeRate\nExponentialFamily.GammaShapeScale\nExponentialFamily.NormalMeanPrecision\nExponentialFamily.NormalMeanVariance\nExponentialFamily.NormalWeightedMeanPrecision\nExponentialFamily.MvNormalMeanPrecision\nExponentialFamily.MvNormalMeanCovariance\nExponentialFamily.MvNormalWeightedMeanPrecision\nExponentialFamily.JointNormal\nExponentialFamily.WishartFast\nExponentialFamily.InverseWishartFast","category":"page"},{"location":"library/#ExponentialFamily.Contingency","page":"Library","title":"ExponentialFamily.Contingency","text":"Contingency(P, renormalize = Val(true))\n\nThe contingency distribution is a multivariate generalization of the categorical distribution. As a bivariate distribution, the  contingency distribution defines the joint probability over two unit vectors v1 and v2 with one hot encoding. Or it can be thought of as the joint distribution of two categoricals with supports v1 ={ 1,2,...,N} and v2 ={ 1,2,...,N}.  The parameter P encodes a contingency matrix that specifies the probability of co-occurrence.\n\nv1 ∈ {0, 1}^d1 where Σ_j v1_j = 1\nv2 ∈ {0, 1}^d2 where Σ_k v2_k = 1\n\nP ∈ [0, 1]^{d1 × d2}, where Σ_jk P_jk = 1\n\nf(v1, v2, P) = Contingency(out1, out2 | P) = Π_jk P_jk^{v1_j * v2_k}\n\nA Contingency distribution over more than two variables requires higher-order tensors as parameters; these are not implemented in ExponentialFamily.jl yet.\n\nFields:\n\nP, required, contingency matrix\nrenormalize, optional, supports either Val(true) or Val(false), specifies whether matrix P must be automatically renormalized. Does not modify the original P and allocates a new one for the renormalized version. If set to false the contingency matrix P must be normalized by hand, otherwise the result of related calculations might be wrong\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.ContinuousBernoulli","page":"Library","title":"ExponentialFamily.ContinuousBernoulli","text":"ContinuousBernoulli{T}\n\nA univariate continuous Bernoulli distribution parametrized by its success probability λ.\n\nFields\n\nλ: The success probability of the continuous Bernoulli distribution. It should be a real number in the interval (0, 1)\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.MatrixDirichlet","page":"Library","title":"ExponentialFamily.MatrixDirichlet","text":"MatrixDirichlet{T <: Real, A <: AbstractMatrix{T}} <: ContinuousMatrixDistribution\n\nA matrix-valued Dirichlet distribution, where T is the element type of the matrix A. The a field stores the matrix parameter of the distribution.\n\nFields\n\na::A: The matrix parameter of the Dirichlet distribution.\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.GammaShapeRate","page":"Library","title":"ExponentialFamily.GammaShapeRate","text":"GammaShapeRate{T <: Real}\n\nA univariate gamma distribution parametrized by its shape a and rate b.\n\nFields\n\na: The shape parameter of the gamma distribution. It should be a positive real number.\nb: The rate parameter of the gamma distribution. It should be a positive real number.\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.GammaShapeScale","page":"Library","title":"ExponentialFamily.GammaShapeScale","text":"GammaShapeScale{T}\n\nA continuous univariate gamma distribution parametrized by its shape α and scale β parameters.\n\nFields\n\nα: The shape parameter of the gamma distribution. It should be a positive real number.\nβ: The scale parameter of the gamma distribution. It should be a positive real number.\n\nNote\n\nGammaShapeScale is an alias for Gamma from Distributions.jl.\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.NormalMeanPrecision","page":"Library","title":"ExponentialFamily.NormalMeanPrecision","text":"NormalMeanPrecision{T <: Real} <: ContinuousUnivariateDistribution\n\nA normal distribution with a known mean μ and precision w.\n\nFields\n\nμ::T: The mean of the normal distribution.\nw::T: The precision of the normal distribution.\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.NormalMeanVariance","page":"Library","title":"ExponentialFamily.NormalMeanVariance","text":"NormalMeanVariance{T <: Real} <: ContinuousUnivariateDistribution\n\nA normal distribution with a known mean μ and variance v.\n\nFields\n\nμ::T: The mean of the normal distribution.\nv::T: The variance of the normal distribution.\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.NormalWeightedMeanPrecision","page":"Library","title":"ExponentialFamily.NormalWeightedMeanPrecision","text":"NormalWeightedMeanPrecision{T <: Real} <: ContinuousUnivariateDistribution\n\nA normal distribution parametrized by its natural parameters: the weighted mean xi and precision w.\n\nFields\n\nxi::T: The weighted mean of the normal distribution. xi is computed as w * μ, where μ is the mean of the distribution.\nw::T: The precision (inverse variance) of the normal distribution.\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.MvNormalMeanPrecision","page":"Library","title":"ExponentialFamily.MvNormalMeanPrecision","text":"MvNormalMeanPrecision{T <: Real, M <: AbstractVector{T}, P <: AbstractMatrix{T}} <: AbstractMvNormal\n\nA multivariate normal distribution with mean μ and precision matrix Λ, where T is the element type of the vectors M and matrices P.\n\nFields\n\nμ::M: The mean vector of the multivariate normal distribution.\nΛ::P: The precision matrix (inverse of the covariance matrix) of the multivariate normal distribution.\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.MvNormalMeanCovariance","page":"Library","title":"ExponentialFamily.MvNormalMeanCovariance","text":"MvNormalMeanCovariance{T <: Real, M <: AbstractVector{T}, P <: AbstractMatrix{T}} <: AbstractMvNormal\n\nA multivariate normal distribution with mean μ and covariance matrix Σ, where T is the element type of the vectors M and matrices P.\n\nFields\n\nμ::M: The mean vector of the multivariate normal distribution.\nΣ::P: The covariance matrix of the multivariate normal distribution\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.MvNormalWeightedMeanPrecision","page":"Library","title":"ExponentialFamily.MvNormalWeightedMeanPrecision","text":"MvNormalWeightedMeanPrecision{T <: Real, M <: AbstractVector{T}, P <: AbstractMatrix{T}} <: AbstractMvNormal\n\nA multivariate normal distribution with a weighted mean vector xi and precision matrix Λ, where T is the element type of the vectors M and matrices P. This struct represents a natural parametrization of a multivariate Gaussian distribution.\n\nFields\n\nxi::M: The weighted mean vector of the multivariate normal distribution.\nΛ::P: The precision matrix (inverse of the covariance matrix) of the multivariate normal distribution.\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.JointNormal","page":"Library","title":"ExponentialFamily.JointNormal","text":"JointNormal{D, S}\n\nJointNormal is an auxilary structure used for the joint marginal over Normally distributed variables. JointNormal stores a vector with the original dimensionalities (ds), so statistics can later be re-separated.\n\nFields\n\ndist: joint distribution (typically just a big MvNormal distribution, but maybe a tuple of individual means and covariance matrices)\nds: a tuple with the original dimensionalities of individual Normal distributions\nds[k] = (n,) where n is an integer indicates Multivariate normal of size n\nds[k] = () indicates Univariate normal\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.WishartFast","page":"Library","title":"ExponentialFamily.WishartFast","text":"WishartFast{T <: Real, A <: AbstractMatrix{T}} <: ContinuousMatrixDistribution\n\nThe WishartFast struct represents a fast version of the Wishart distribution. It is similar to the Wishart distribution from Distributions.jl, but it does not check input arguments, allowing the creation of improper Wishart messages.\n\nFor model creation and regular usage, it is recommended to use Wishart from Distributions.jl. The WishartFast distribution is intended for internal purposes and should not be directly used by regular users.\n\nFields\n\nν::T: The degrees of freedom parameter of the Wishart distribution.\ninvS::A: The inverse scale matrix parameter of the Wishart distribution.\n\nNote\n\nInternally, WishartFast stores and creates the inverse of its scale matrix. However, the params() function returns the scale matrix itself for backward compatibility. This is done to ensure better stability in the message passing update rules for ReactiveMP.jl.\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.InverseWishartFast","page":"Library","title":"ExponentialFamily.InverseWishartFast","text":"InverseWishartFast{T <: Real, A <: AbstractMatrix{T}} <: ContinuousMatrixDistribution\n\nThe InverseWishartFast struct represents an improper Inverse Wishart distribution. It is similar to the InverseWishart distribution from Distributions.jl, but it does not check input arguments, allowing the creation of improper InverseWishart messages. \n\nFor model creation and regular usage, it is recommended to use InverseWishart from Distributions.jl. The InverseWishartFast distribution is intended for internal purposes and should not be directly used by regular users.\n\nFields\n\nν::T: The degrees of freedom parameter of the inverse Wishart distribution.\nS::A: The scale matrix parameter of the inverse Wishart distribution.\n\nNote\n\nThe InverseWishartFast distribution does not enforce input argument validation, making it suitable for specialized cases where improper message constructions are needed.\n\n\n\n\n\n","category":"type"},{"location":"library/#Prod-related-methods","page":"Library","title":"Prod related methods","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"prod(::ClosedProd, left, right)\nExponentialFamily.ProdPreserveType\nExponentialFamily.ProdPreserveTypeLeft\nExponentialFamily.ProdGeneric\nExponentialFamily.ProdPreserveTypeRight\nExponentialFamily.closed_prod_rule\nExponentialFamily.ClosedProd\nExponentialFamily.LinearizedProductDistribution\nExponentialFamily.ProductDistribution","category":"page"},{"location":"library/#Base.prod-Tuple{ClosedProd, Any, Any}","page":"Library","title":"Base.prod","text":"prod(strategy, left, right)\n\nprod function is used to find a product of two probability distrubutions (or any other objects) over same variable (e.g. 𝓝(x|μ1, σ1) × 𝓝(x|μ2, σ2)). There are multiple strategies for prod function, e.g. ClosedProd, ProdGeneric or ProdPreserveType.\n\nExamples:\n\nusing ExponentialFamily\n\nproduct = prod(ClosedProd(), NormalMeanVariance(-1.0, 1.0), NormalMeanVariance(1.0, 1.0))\n\nmean(product), var(product)\n\n# output\n(0.0, 0.5)\n\nSee also: closed_prod_rule, ClosedProd, ProdGeneric\n\n\n\n\n\n","category":"method"},{"location":"library/#ExponentialFamily.ProdPreserveType","page":"Library","title":"ExponentialFamily.ProdPreserveType","text":"ProdPreserveType{T}\n\nProdPreserveType is one of the strategies for prod function. This strategy constraint an output of a prod to be in some specific form. By default it fallbacks to a ClosedProd strategy and converts an output to a prespecified type but can be overwritten for some distributions for better performance. See also: prod, ClosedProd, ProdPreserveTypeLeft, ProdPreserveTypeRight\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.ProdPreserveTypeLeft","page":"Library","title":"ExponentialFamily.ProdPreserveTypeLeft","text":"ProdPreserveTypeLeft\n\nProdPreserveTypeLeft is one of the strategies for prod function. This strategy constraint an output of a prod to be in the functional form as left argument. By default it fallbacks to a ProdPreserveType strategy and converts an output to a prespecified type but can be overwritten for some distributions for better performance. See also: prod, ProdPreserveType, ProdPreserveTypeRight\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.ProdGeneric","page":"Library","title":"ExponentialFamily.ProdGeneric","text":"ProdGeneric{C}\n\nProdGeneric is one of the strategies for prod function. This strategy does not fail in case of no closed rule is available, but simply creates a product tree, there all nodes represent the prod function and all leaves are valid Distribution object. This object does not define any statistical properties (such as mean or var etc) and cannot be used during the inference procedure. However this object plays imporant part in the functional form constraints implementation.  In a few words this object keeps all the information of a product of messages and propagates this information in the functional form constraint.\n\nProdGeneric has a \"fallback\" method, which it may or may not use under some circumstances. For example if the fallback method is ClosedProd (which is the default one) - ProdGeneric will try to optimize prod tree with analytical solutions where possible.\n\nSee also: prod, ProductDistribution, ClosedProd, ProdPreserveType, closed_prod_rule, LinearizedProductDistribution\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.ProdPreserveTypeRight","page":"Library","title":"ExponentialFamily.ProdPreserveTypeRight","text":"ProdPreserveTypeRight\n\nProdPreserveTypeRight is one of the strategies for prod function. This strategy constraint an output of a prod to be in the functional form as right argument. By default it fallbacks to a ProdPreserveType strategy and converts an output to a prespecified type but can be overwritten for some distributions for better performance. See also: prod, ProdPreserveType, ProdPreserveTypeLeft\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.closed_prod_rule","page":"Library","title":"ExponentialFamily.closed_prod_rule","text":"closed_prod_rule(::Type, ::Type)\n\nReturns either ClosedProd or ClosedProdUnknown for two given distribution types. Returns ClosedProdUnknown by default. See also: prod, ClosedProd, ProdGeneric\n\n\n\n\n\n","category":"function"},{"location":"library/#ExponentialFamily.ClosedProd","page":"Library","title":"ExponentialFamily.ClosedProd","text":"ClosedProd\n\nClosedProd is one of the strategies for prod function. This strategy uses analytical prod methods but does not constraint a prod to be in any specific form. It throws an NoClosedProdException if no analytical rules is available, use ProdGeneric prod strategy to fallback to approximation methods.\n\nNote: ClosedProd ignores missing values and simply returns the non-missing argument. Returns missing in case if both arguments are missing.\n\nSee also: prod, ProdPreserveType, ProdGeneric\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.LinearizedProductDistribution","page":"Library","title":"ExponentialFamily.LinearizedProductDistribution","text":"LinearizedProductDistribution\n\nAn efficient linearized implementation of product of multiple generic ExponentialFamilyDistribution objects. This structure prevents ProductDistribution tree from growing too much in case of identical objects.  This trick significantly reduces Julia compilation times when closed product rules are not available but distributions are of the same type. Essentially this structure linearizes leaves of the ProductDistribution tree in case if it sees objects of the same type (via dispatch).\n\nSee also: ProductDistribution\n\n\n\n\n\n","category":"type"},{"location":"library/#ExponentialFamily.ProductDistribution","page":"Library","title":"ExponentialFamily.ProductDistribution","text":"ProductDistribution{L, R}(left::L, right::R)\n\nA product distribution structure composed of two distributions left and right.\n\nArguments\n\nleft: The left component distribution.\nright: The right component distribution.\n\n\n\n\n\n","category":"type"},{"location":"examples/#examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In these examples, we demonstrate how to use ExponentialFamily.jl to compute the product of probability distributions.","category":"page"},{"location":"examples/#Examples-of-distributions'-product","page":"Examples","title":"Examples of distributions' product","text":"","category":"section"},{"location":"examples/#Bernoulli-distribution","page":"Examples","title":"Bernoulli distribution","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ExponentialFamily, Distributions\nimport ExponentialFamily: ExponentialFamilyDistribution\n\ndist_left = Bernoulli(0.5)\ndist_right = Bernoulli(0.6)\n@show dist_prod = prod(ClosedProd(), dist_left, dist_right)\n\nef_left = convert(ExponentialFamilyDistribution, dist_left)\nef_right = convert(ExponentialFamilyDistribution, dist_right)\nef_prod = prod(ef_left, ef_right)\n\n@show convert(Bernoulli, ef_prod)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We created two Bernoulli distributions and compute their product using the ClosedProd trait. We also show how to convert the Bernoulli distributions to ExponentialFamilyDistribution, compute the product of the exponential family distributions, and convert the product back to a Bernoulli distribution.","category":"page"},{"location":"examples/#Laplace-distribution","page":"Examples","title":"Laplace distribution","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ExponentialFamily\nimport ExponentialFamily: ExponentialFamilyDistribution\n\ndist_left = Laplace(1.0, 3.0)\ndist_right = Laplace(1.0, 4.0)\nprod(ClosedProd(), dist_left, dist_right)\n\n\n# Note that the product of Laplace distributions with different location parameters is not a Laplace distribution\n# However, it is still a member of the exponential family\ndist_left = Laplace(1.0, 3.0)\ndist_right = Laplace(3.0, 4.0)\nprod(ClosedProd(), dist_left, dist_right)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We create two Laplace distributions and compute their product using the ClosedProd function. We also note that the product of Laplace distributions with different location parameters is not a Laplace distribution but still a member of the exponential family.","category":"page"},{"location":"examples/#Other-examples","page":"Examples","title":"Other examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ExponentialFamily\nimport ExponentialFamily: ExponentialFamilyDistribution, fisherinformation\n\n## Multivariate Normal example\ndist = MvNormalMeanCovariance([1.0, 1.0], [1.0 0.0; 0.0 1.0])\n@show fisherinformation(ef)\n@show pdf(dist, [1.0, 1.0])\n\n## LogNormal example\ndist = LogNormal(0.0, 1.0)\nef = convert(ExponentialFamilyDistribution, dist)\n@show fisherinformation(ef)\n@show fisherinformation(dist)\n@show pdf(ef, 2)\n\n## Poisson example\nef = ExponentialFamilyDistribution(Poisson, [1.0])\n@show fisherinformation(ef)\n@show pdf(ef, 2)\n","category":"page"},{"location":"#ExponentialFamily.jl","page":"Home","title":"ExponentialFamily.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia package that extends the functionality of Distributions.jl by providing a collection of exponential family distributions and customized implementations. It is designed to facilitate working with exponential family distributions and offers specialized functionality tailored to this class of distributions.","category":"page"},{"location":"#Table-of-Contents","page":"Home","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Examples\nLibrary","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
